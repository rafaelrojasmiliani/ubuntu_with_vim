set mouse=r
set guifont=Monospace
set si
set ai
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smarttab
set backspace=2
set hidden
set guioptions=i
set go+=!
set wildmode=longest:full,full
set foldmethod=marker
set foldmarker={{{,}}}
au BufRead,BufNewFile *.tex syntax spell toplevel " enable spelling without sections
colorscheme desert
nnoremap <silent><Up> gk
nnoremap <silent><Down> gj
vnoremap <silent><Up> gk
vnoremap <silent><Down> gj
inoremap <silent><Up> <C-o>gk
inoremap <silent><Down> <C-o>gj
nnoremap <C-J> jzz
nnoremap <C-K> kzz
nnoremap <silent> yr :call setreg(v:register, getreg(nr2char(getchar())))<cr>
set display+=lastline "prevent @ when a line doesn't fit on screen
"disable this keys in normal mode
nnoremap <CR> <Nop>
nnoremap + <Nop>
nnoremap - <Nop>
" ---------------------------------------
set nocompatible
set number
set cursorline
filetype off
set rtp+=/etc/vim/bundle/Vundle.vim
call vundle#begin('/etc/vim/bundle/')
    Plugin 'Vundle.vim'
    Plugin 'YouCompleteMe'
        set encoding=utf-8
        let g:ycm_key_list_select_completion = ['<C-n>']
        let g:ycm_key_list_previous_completion = ['<C-p>']
        let g:ycm_python_binary_path='/usr/bin/python3'
        let g:ycm_clangd_binary_path=substitute(system('which clangd'), '\n', '', '')
        let g:ycm_clangd_args=['--header-insertion=never', '--clang-tidy']
        let g:ycm_global_ycm_extra_conf='/etc/vim/ycm_extra_conf.py'
        let g:ycm_confirm_extra_conf = 1
        let g:SuperTabDefaultCompletionType = '<C-n>'
        let g:ycm_semantic_triggers =  {
                    \   'VimspectorPrompt': [ '.', '->', ':', '<' ] }
        let g:ycm_always_populate_location_list = 1
        set completeopt-=preview

        nmap <leader>yfw <Plug>(YCMFindSymbolInWorkspace)
        nmap <leader>yfd <Plug>(YCMFindSymbolInDocument)
        nmap <leader>yth <Plug>(YCMTypeHierarchy)
        nmap <leader>ych <Plug>(YCMCallHierarchy)

    Plugin 'vim-latex'
    " ------- tagbar -------
    Plugin 'tagbar'
        let g:tagbar_ctags_options = ['/etc/vim/ctags']
        let g:tagbar_type_xml = {
                    \ 'kinds' : ['j:joints', 'l:links', 'p:properties', 'm:macros', 'i:includes', 'n:nodes']
                    \}
        " Define the custom function to handle Tagbar positioning and toggling
        function! ToggleTagbarWithPosition()

            " Get the width of each window
            let l:cursor_col = screencol()

            " Get the total width of the Vim window
            let l:total_width = &columns

            " Calculate the middle column
            let l:middle_col = l:total_width / 2

            " Get the total width of the Vim window
            let l:total_width = &columns

            if l:cursor_col > l:middle_col
                " Focus is on the right window
                let g:tagbar_position = 'botright vertical'
            else
                " Focus is on the left window
                let g:tagbar_position = 'topleft vertical'
            endif

            :TagbarToggle
            " Toggle Tagbar
        endfunction

        " Map <leader>tb to call the custom function
        nnoremap <silent> <leader>tb :call ToggleTagbarWithPosition()<CR>

    Plugin 'bufexplorer'
        " ------- ale -------
    Plugin 'ale'
        let g:ale_completion_enabled = 0
        let g:ale_fixers = {
                    \ 'python': ['autopep8'],
                    \ 'cpp': ['clang-format'],
                    \ 'java': ['clang-format'],
                    \ 'cmake': ['cmakeformat'],
                    \ 'xml':['tidy'],
                    \ 'javascript':['prettier'],
                    \ '*':['remove_trailing_lines', 'trim_whitespace'],
                    \ 'json':['jq'],
                    \ 'yaml':['prettier'],
                    \ 'html':['prettier'],
                    \ 'sh':['shfmt']
                    \ }
        let g:ale_sh_shfmt_options='-i 4'

        " do not lint c++ with ale. Use ycm
        let g:ale_linters = {
                    \'python': ['pylint', 'flake8'],
                    \'xml':['xmllint'],
                    \'cpp':[],
                    \'dockerfile':['hadolint'],
                    \'sh':['bashate'],
                    \'html':['htmlhint'],
                    \}
        let g:ale_c_clangformat_use_local_file = 1
        let g:ale_cpp_clangtidy_executable = 'clang-tidy'
        let g:ale_cpp_cc_executable = 'gcc'
        let g:ale_sign_error = 'E'
        let g:ale_sign_warning = 'W'
        let g:ale_lint_on_text_changed = 'never'
        let g:ale_lint_on_enter = 1
        let g:ale_lint_on_insert_leave = 1
        let g:ale_fix_on_save = 1
        function! SetAlePylint()
			let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")' --extension-pkg-allow-list=.so"
			if filereadable(".pylintrc")
				let g:ale_python_pylint_options = "--rcfile .pylintrc " . g:ale_python_pylint_options
			endif
        endfunction
        autocmd BufRead,BufNewFile *.py call SetAlePylint()

        nmap <silent> <leader>aj :ALENext<cr>
        nmap <silent> <leader>ak :ALEPrevious<cr>

    " ------- vim-substitute -------
    Plugin 'vim-substitute'
        let g:substitute_SingleWordSize=100
    Plugin 'ultisnips'
        let g:UltiSnipsExpandTrigger = "<c-j>"
        let g:UltiSnipsJumpForwardTrigger = "<c-n>"
        let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
    Plugin 'vim-snippets'
    Plugin 'vim_snippets_ros'
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
    Plugin 'vim-fugitive'
    Plugin 'xmledit'
    Plugin 'vimspector'
        let g:vimspector_enable_mappings = 'HUMAN'
        map  <F4>          :TagbarToggle<CR>
		nmap <Leader>di <Plug>VimspectorBalloonEval
		xmap <Leader>dr <Plug>VimspectorReset
    Plugin 'vim-dispatch'
    Plugin 'fzf'
    Plugin 'fzf.vim'
        nnoremap <leader>fe :Files<CR>
        nnoremap <leader>ge :GFiles<CR>
        nnoremap <leader>bbe :Buffers<CR>

    Plugin 'nerdtree'
        set wildignore+=*.pyc,*.o,*.obj,*.svn,*.swn,*.swp,*.swo,*.class,*.hg,*.DS_Store,*.min.*,*.pdf,*.nav
        let NERDTreeRespectWildIgnore=1
        let NERDTreeShowHidden=1
        function! ToggleNERDTreeWithPosition()

            " Get the width of each window
            let l:cursor_col = screencol()

            " Get the total width of the Vim window
            let l:total_width = &columns

            " Calculate the middle column
            let l:middle_col = l:total_width / 2

            " Get the total width of the Vim window
            let l:total_width = &columns

            if l:cursor_col > l:middle_col
                " Focus is on the right window
                let g:NERDTreeWinPos = 'right'
            else
                " Focus is on the left window
                let g:NERDTreeWinPos = 'left'
            endif

            :NERDTreeToggle
        endfunction

        nnoremap <silent> <leader>nt :call ToggleNERDTreeWithPosition()<CR>
    Plugin 'nerdtree-git-plugin'


    Plugin 'cmake4vim'
        let g:cmake_vimspector_support=1
        let g:cmake_build_executor='dispatch'
        let g:make_arguments='-j20'
        let g:cmake_usr_args='-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_EXPORT_COMPILE_COMMANDS=ON'
        let g:cmake_ctest_args='-j20 --output-on-failure --verbose'
        let g:cmake_build_dir_prefix='cmake-' . substitute(system("lsb_release -ds | sed 's/ /_/g'"), '\n', '', '') . '-'
        let g:cmake_kits_global_path='/etc/vim/cmake_kits.cmake'

    autocmd BufRead,BufNewFile *.cpp
   			\ let g:cmake_vimspector_default_configuration = {
               \ 'adapter': 'vscode-cpptools',
               \ 'configuration': {
                   \ 'request': 'launch',
                   \ 'cwd': '${workspaceRoot}',
                   \ 'Mimode': '',
                   \ 'args': [],
                   \ 'program': ''
                   \ }
               \ }

    Plugin 'lualine-cmake4vim'

    Plugin 'vim-interestingwords'

    Plugin 'vim-doge'
        let g:doge_doc_standard_cpp='doxygen_cpp_comment_slash'

    Plugin 'Vim-Jinja2-Syntax'
    Plugin 'indentLine'
    Plugin 'vim-commentary'
    Plugin 'vim-repeat'
    Plugin 'vim-surround'
        let b:surround_{char2nr('i')} = "\n#ifdef \1ifdef condition: \1 \r #endif\n"

    "Plugin 'vim-unimpaired'  not sufficiently useful
    Plugin 'vim-cutclass'
    Plugin 'vim-yoink'
        let g:yoinkIncludeDeleteOperations=1

    Plugin 'vim-editvar'
    Plugin 'powerline'
    Plugin 'vim-be-good'

    " vim refactor stuff
    Plugin 'lh-vim-lib'
    Plugin 'lh-tags'
    Plugin 'lh-dev'
    Plugin 'lh-style'
    Plugin 'lh-brackets'
    Plugin 'vim-refactor'
    " For experimental function extraction
    Plugin 'mu-template'
    Plugin 'stakeholders_vim'

    Plugin 'undotree'
    Plugin 'vim-find-files'
    Plugin 'vim-mergetool'
        let g:mergetool_layout = 'mr,b'
        nmap <leader>mtt <plug>(MergetoolToggle)
        nnoremap <silent> <leader>mtlm :call mergetool#toggle_layout('mr,b')<CR>
        nnoremap <silent> <leader>mtll :call mergetool#toggle_layout('lr,b')<CR>
    Plugin 'ctrlp.vim'
    Plugin 'ctrlp-funky'

    Plugin 'vista'
    Plugin 'vim-clap'
        nmap <leader>cb :Clap buffers<CR>
        nmap <leader>cfl :Clap files<CR>
        nmap <leader>cfg :Clap files .<CR>
        nmap <leader>ctl :Clap tags<cr>
        nmap <leader>cgc :Clap bcommits<cr>
        nmap <leader>cgr :Clap grep<cr>
        nmap <leader>cm :Clap marks<cr>
        nmap <leader>cy :Clap yanks<cr>
        nmap <leader>cj :Clap jumps<cr>

    Plugin 'vim-arduino'
    Plugin 'vim-polyglot'
    Plugin 'vim-markdown'
        let g:markdown_syntax_conceal = 0
        let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'cpp', 'xml']
    Plugin 'vim-easy-align'
    Plugin 'gtest-vim'
    Plugin 'spelunker.vim'
        let g:spelunker_white_list_for_user = ['ros', 'vimrc', 'yaml', 'rcl', 'of', 'os', 'alloc', 'cpp', 'filesystem', 'rclcpp']
        let g:spelunker_white_list_for_user += ['ofstream', 'iostream', 'osstringstream', 'imfusion', 'rosparam', 'trunc', 'ifdef']
        let g:spelunker_white_list_for_user += ['chrono']
        autocmd ColorScheme,VimEnter *
                    \ highlight SpelunkerSpellBad cterm=underline ctermfg=247 gui=underline guifg=#4d4d4d
        autocmd ColorScheme,VimEnter *
                    \ highlight SpelunkerComplexOrCompoundWord cterm=underline ctermfg=NONE gui=underline guifg=NONE

    Plugin 'vim-diminactive'
        autocmd ColorScheme,VimEnter *
                    \ verbose highlight! ColorColumn cterm=none term=none ctermbg=DarkGray ctermfg=none guibg=#2f2713 guifg=NONE
        let g:diminactive_buftype_blacklist = ['nofile', 'nowrite', 'acwrite', 'quickfix', 'help', 'diff']

    Plugin 'spotdiff.vim'
    Plugin 'diffchar.vim'

    Plugin 'Vim-Goto-Header'
        let g:goto_header_search_flags = "-t f -s"
        let g:goto_header_excludes_dirs = []
        let g:goto_header_open_in_new_tab = 0
        let g:goto_header_use_shorter_path = 0
        let g:goto_header_associate_cpp_h = 1
python3 << EOF
import vim, sys, os
if os.path.dirname(os.getcwd())=="/":
    vim.command("let g:goto_header_includes_dirs = [\".\", \"/usr/include\", \"~\"]")
else:
    vim.command("let g:goto_header_includes_dirs = [\".\", \"/usr/include\", \"..\", \"~\"]")
EOF


    Plugin 'miniterm.vim'

    Plugin 'vim-flog'
    "https://github.com/rbong/vim-flog/issues/111
    let g:flog_use_internal_lua = 1


    Plugin 'git-messenger.vim'

    Plugin 'vim-fubitive'

    Plugin 'vim-rhubarb'

    Plugin 'fugitive-gitlab.vim'

    Plugin 'kotlin-vim'

    Plugin 'vim-slime'

    Plugin 'vim-gutentags'

    Plugin 'gutentags_plus'
        " enable gtags module
        let g:gutentags_modules = ['ctags', 'gtags_cscope']

        let g:gutentags_project_root = ['.svn', '.git', '.hg', 'package.json', 'CMakeLists.txt', 'pom.xml', '.idea', '.vscode']
        if executable('rg')
            let g:gutentags_file_list_command = 'rg --files'
        endif

        command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')

        let g:gutentags_ctags_extra_args = [
          \ '--tag-relative=yes',
          \ '--fields=+ailmnS',
          \ ]

        let g:gutentags_plus_switch = 1
        let g:gutentags_generate_on_new = 1
        let g:gutentags_generate_on_missing = 1
        let g:gutentags_generate_on_write = 1
        let g:gutentags_ctags_exclude = [
          \ '*.git',
          \ '.git',
          \ '*.svg',
          \ '*.hg',
          \ '*/tests/*',
          \ 'build',
          \ 'dist',
          \ '*sites/*/files/*',
          \ 'bin',
          \ 'node_modules',
          \ 'bower_components',
          \ 'cache',
          \ 'compiled',
          \ 'docs',
          \ 'example',
          \ 'bundle',
          \ 'vendor',
          \ 'cmake-*',
          \ '*.md',
          \ '*-lock.json',
          \ '*.lock',
          \ '*bundle*.js',
          \ '*build*.js',
          \ '.*rc*',
          \ '*.json',
          \ '*.min.*',
          \ '*.map',
          \ '*.bak',
          \ '*.zip',
          \ '*.pyc',
          \ '*.class',
          \ '*.sln',
          \ '*.Master',
          \ '*.csproj',
          \ '*.tmp',
          \ '*.csproj.user',
          \ '*.cache',
          \ '*.pdb',
          \ 'tags*',
          \ 'cscope.*',
          \ '*.css',
          \ '*.less',
          \ '*.scss',
          \ '*.exe',
          \ '*.dll',
          \ '*.mp3',
          \ '*.ogg',
          \ '*.flac',
          \ '*.swp',
          \ '*.swo',
          \ '*.bmp',
          \ '*.gif',
          \ '*.ico',
          \ '*.jpg',
          \ '*.png',
          \ '*.rar',
          \ '*.zip',
          \ '*.tar',
          \ '*.tar.gz',
          \ '*.tar.xz',
          \ '*.tar.bz2',
          \ '*.pdf',
          \ '*.doc',
          \ '*.docx',
          \ '*.ppt']


    Plugin 'llama.vim'

    let g:llama_config = {
         \ 'endpoint':         'http://127.0.0.1:8012/infill',
         \ 'api_key':          '',
         \ 'n_prefix':         256,
         \ 'n_suffix':         64,
         \ 'n_predict':        128,
         \ 't_max_prompt_ms':  600,
         \ 't_max_predict_ms': 600,
         \ 'show_info':        0,
         \ 'auto_fim':         v:true,
         \ 'max_line_suffix':  8,
         \ 'max_cache_keys':   250,
         \ 'ring_n_chunks':    16,
         \ 'ring_chunk_size':  64,
         \ 'ring_scope':       1024,
         \ 'ring_update_ms':   1000,
         \ }
    Plugin 'copilot.vim'

call vundle#end()
filetype plugin indent on
filetype plugin on
" ----------------------------------------------------
" ---------------- Status Line -----------------------
" ----------------------------------------------------

autocmd ColorScheme,VimEnter *
    \ highlight GITPART ctermfg=black ctermbg=yellow  guifg=yellow guibg=black
" jamessan's
set laststatus=2
set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%1*%#GITPART#%{FugitiveStatusline()}%*
set statusline+=%-2.2n                       " buffer number
set statusline+=%{fnamemodify(expand('%:p:h'),':h:t')}/%{expand('%:p:h:t')}/%t
set statusline+=%h%m%r%w                     " flags_
set statusline+=[
"set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
"set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]               " file format
set statusline+=%=                            " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  "show hi
set statusline+={%b,0x%B}\                   " current char
set statusline+=(%(%l,%c%V%))\ %<%P        " offset

" ----------------------------------------------------
" ---------------- Sentece for each line format ------
" ----------------------------------------------------
function! MyFormatExpr(start, end)
  silent execute a:start.','.a:end.'j'
  silent execute a:start.','.a:end.'s/\(e\.g\|\<al\|i\.e\)\@<![.!?]\zs /\r/g'
"\zs     Matches at any position, and sets the start of the match there: The
"        next char is the first char of the whole match. /zero-width
"        I.E. This only substitute the space after [.!?]
  silent execute a:start.','.a:end.'g/^\s*$/d'
"\s      whitespace character: <Space> and <Tab>
endfunction

set formatexpr=MyFormatExpr(v:lnum,v:lnum+v:count-1)

set conceallevel=0
au BufRead,BufNewFile *.tex set wildignore+=*.log
set wildignore+=*.git\\*,*.tgz,*.zip,*.url,*.pyc,*.class,*.aux
set wildignore+=*.svg,cmake-*,*.exe,*.dll,*.mp3,*.ogg,*.flac
set wildignore+=*.swp,*.swo,*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=*.rar,*.tar,*.tar.gz,*.tar.xz,*.tar.bz2
set wildignore+=*.pdf,*.aux,*.log,*.nav,*.out,*.pytxcode
set wildignore+=*.snm,*.toc,*.vrb
set wildignore+=*.pptx
