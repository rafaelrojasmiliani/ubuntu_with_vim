name: deploy
on: push
jobs:
  # ------------------ #
  # ------------------ #
  # Build ubuntu 20.04 #
  # ------------------ #
  # ------------------ #
  base_ubuntu_2004:
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      image_name: "rafa606/ubuntu:20.04"
      file_name: "base.dockerfile"
      base_image: "ubuntu:20.04"
      file_triggers: '["configfiles/install_ubuntu_base.bash", "configfiles/install_vim_plugins_base.bash"]'
      # Final image data
      final_image_name: "rafa606/cpp-vim:20.04"
      ycm_file: "configfiles/ycm_extra_conf.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------ #
  # ------------------ #
  # Build ubuntu 20.04 #
  # ------------------ #
  # ------------------ #
  base_ubuntu_2204:
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      image_name: "rafa606/ubuntu:22.04"
      file_name: "base.dockerfile"
      base_image: "ubuntu:22.04"
      file_triggers: '["configfiles/install_ubuntu_base.bash", "configfiles/install_vim_plugins_base.bash"]'
      # Final image data
      final_image_name: "rafa606/cpp-vim:22.04"
      ycm_file: "configfiles/ycm_extra_conf.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------ #
  # ------------------ #
  # Build ubuntu 24.04 #
  # ------------------ #
  # ------------------ #
  base_ubuntu_2404:
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      image_name: "rafa606/ubuntu:24.04"
      file_name: "base.dockerfile"
      base_image: "ubuntu:24.04"
      file_triggers: '["configfiles/install_ubuntu_base.bash", "configfiles/install_vim_plugins_base.bash"]'
      # Final image data
      final_image_name: "rafa606/cpp-vim:24.04"
      ycm_file: "configfiles/ycm_extra_conf.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------------------------------------------------- #
  # ------------------------------------------------------------- #
  # --------              Build ROS Images              --------- #
  # ------------------------------------------------------------- #
  # ------------------------------------------------------------- #

  # ------------------ #
  # ------------------ #
  # Build ROS noetic - #
  # ------------------ #
  # ------------------ #
  ros_noetic:
    needs: base_ubuntu_2004
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "ros.dockerfile"
      base_image: "rafa606/ubuntu:20.04"
      image_name: "rafa606/ros:noetic"
      ros_distro: "noetic"
      file_triggers: '["configfiles/install_ros_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/ros-vim:noetic"
      ycm_file: "configfiles/ycm_extra_conf_ros.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------ #
  # ------------------ #
  # Build ROS humble - #
  # ------------------ #
  # ------------------ #
  ros_humble:
    needs: base_ubuntu_2204
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "ros.dockerfile"
      base_image: "rafa606/ubuntu:22.04"
      image_name: "rafa606/ros:humble"
      ros_distro: "humble"
      file_triggers: '["configfiles/install_ros_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/ros-vim:humble"
      ycm_file: "configfiles/ycm_extra_conf_ros2.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------ #
  # ------------------ #
  # Build ROS jazzy  - #
  # ------------------ #
  # ------------------ #
  ros_jazzy:
    needs: base_ubuntu_2404
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "ros.dockerfile"
      base_image: "rafa606/ubuntu:24.04"
      image_name: "rafa606/ros:jazzy"
      ros_distro: "jazzy"
      file_triggers: '["configfiles/install_ros_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/ros-vim:jazzy"
      ycm_file: "configfiles/ycm_extra_conf_ros2.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------------------- #
  # ------------------------------- #
  # Build ROS with moveit noetic  - #
  # ------------------------------- #
  # ------------------------------- #
  moveit_noetic:
    needs: ros_noetic
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "moveit.dockerfile"
      base_image: "rafa606/ros:noetic"
      image_name: "rafa606/moveit:noetic"
      ros_distro: "noetic"
      file_triggers: '["configfiles/install_moveit_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/moveit-vim:noetic"
      ycm_file: "configfiles/ycm_extra_conf_ros.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------------------- #
  # ------------------------------- #
  # Build ROS with moveit humble  - #
  # ------------------------------- #
  # ------------------------------- #
  moveit_humble:
    needs: ros_humble
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "moveit.dockerfile"
      base_image: "rafa606/ros:humble"
      image_name: "rafa606/moveit:humble"
      ros_distro: "humble"
      file_triggers: '["configfiles/install_moveit_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/moveit-vim:humble"
      ycm_file: "configfiles/ycm_extra_conf_ros2.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------------------- #
  # ------------------------------- #
  # Build ROS with moveit jazzy   - #
  # ------------------------------- #
  # ------------------------------- #
  moveit_jazzy:
    needs: ros_jazzy
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "moveit.dockerfile"
      base_image: "rafa606/ros:jazzy"
      image_name: "rafa606/moveit:jazzy"
      ros_distro: "jazzy"
      file_triggers: '["configfiles/install_moveit_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/moveit-vim:jazzy"
      ycm_file: "configfiles/ycm_extra_conf_ros2.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # -------------------------------------- #
  # -------------------------------------- #
  # Build ROS with moveit source noetic  - #
  # -------------------------------------- #
  # -------------------------------------- #
  moveit_source_noetic:
    needs: ros_noetic
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "moveit_source.dockerfile"
      base_image: "rafa606/ros:noetic"
      image_name: "rafa606/moveit-source:noetic"
      ros_distro: "noetic"
      file_triggers: '["configfiles/install_moveit_source_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/moveit-source-vim:noetic"
      ycm_file: "configfiles/ycm_extra_conf_ros.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # -------------------------------------- #
  # -------------------------------------- #
  # Build ROS with moveit source humble  - #
  # -------------------------------------- #
  # -------------------------------------- #
  moveit_source_humble:
    needs: ros_humble
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "moveit_source.dockerfile"
      base_image: "rafa606/ros:humble"
      image_name: "rafa606/moveit-source:humble"
      ros_distro: "humble"
      file_triggers: '["configfiles/install_moveit_source_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/moveit-source-vim:humble"
      ycm_file: "configfiles/ycm_extra_conf_ros2.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # -------------------------------------- #
  # -------------------------------------- #
  # Build ROS with moveit source humble  - #
  # -------------------------------------- #
  # -------------------------------------- #
  moveit_source_jazzy:
    needs: ros_jazzy
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "moveit_source.dockerfile"
      base_image: "rafa606/ros:jazzy"
      image_name: "rafa606/moveit-source:jazzy"
      ros_distro: "jazzy"
      file_triggers: '["configfiles/install_moveit_source_packages.bash"]'
      # Final image data
      final_image_name: "rafa606/moveit-source-vim:jazzy"
      ycm_file: "configfiles/ycm_extra_conf_ros2.py"
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # ------------------------------------------------------------------- #
  # ------------------------------------------------------------------ #
  # --------------            Other Images              -------------- #
  # ------------------------------------------------------------------- #
  # ------------------------------------------------------------------- #
  # -------------------------------------- #
  # -------------------------------------- #
  # ----   MSVC compiler in linux -------- #
  # -------------------------------------- #
  # -------------------------------------- #
  msvc_images:
    name: Build msvc
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "msvc.dockerfile"
      image_name: "rafa606/ubuntu-msvc:24.04"
      base_image: "ubuntu:24.04"
      file_triggers: '["configfiles/install_msvc.bash"]'
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # -------------------------------------- #
  # -------------------------------------- #
  # ----   ROS2 with feecad daily -------- #
  # -------------------------------------- #
  # -------------------------------------- #
  freecad_daily:
    needs: moveit_jazzy
    uses: ./.github/workflows/build_image.yml
    with:
      # based image data
      file_name: "freecad_daily.dockerfile"
      base_image: "rafa606/moveit-vim:jazzy"
      image_name: "rafa606/freecad-ros:jazzy"
      file_triggers: '["configfiles/install_msvc.bash"]'
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  # -------------------------------------- #
  # -------------------------------------- #
  # ----   ubuntu with llama cpp  -------- #
  # -------------------------------------- #
  # -------------------------------------- #
  build_alpine_llama_cpp:
    name: Image for llama cpp
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: "0"
      - name: Set and use variable
        id: name_definitions
        run: |
          echo "image_name=rafa606/llama_cpp:alpine" >> $GITHUB_OUTPUT
          echo "file_name=alpine_llama_cpp.dockerfile" >> $GITHUB_OUTPUT

      - name: Check last modified time of Foo Dockerfile
        id: image_modify_date
        run: |
          echo "value=$(date -d "$(curl -s https://hub.docker.com/v2/repositories/"$(echo ${{ steps.name_definitions.outputs.image_name }} | sed 's/:/\/tags\//')" | jq -r '.last_updated')" +%s)" >> $GITHUB_OUTPUT;

      - name: Check last modified time of Foo Docker image
        id: file_modify_date
        run: |
          echo "dockerfile=$(date -d "$(git log -1 --format=%cd --date=iso -- ${{ steps.name_definitions.outputs.file_name }})" +%s)" >> $GITHUB_OUTPUT

      - name: Set up QEMU # to support more platforms that amd64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx # for cross-platform builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          file: ${{ steps.name_definitions.outputs.file_name }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            LLAMA_GIT_TAG=b4686
          push: true
          tags: ${{ steps.name_definitions.outputs.image_name }}
        if: |
          steps.image_modify_date.outputs.value < steps.file_modify_date.outputs.dockerfile

  build_ubuntu_llama_cpp_cuda:
    name: Image for llama cpp with cuda 12.5 in ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: "0"
      - name: Set and use variable
        id: name_definitions
        run: |
          echo "image_name=rafa606/llama_cpp:22.04_cuda_12.5" >> $GITHUB_OUTPUT
          echo "file_name=ubuntu_llama_cpp_cuda.dockerfile" >> $GITHUB_OUTPUT

      - name: Check last modified time of Foo Dockerfile
        id: image_modify_date
        run: |
          echo "value=$(date -d "$(curl -s https://hub.docker.com/v2/repositories/"$(echo ${{ steps.name_definitions.outputs.image_name }} | sed 's/:/\/tags\//')" | jq -r '.last_updated')" +%s)" >> $GITHUB_OUTPUT;

      - name: Check last modified time of Foo Docker image
        id: file_modify_date
        run: |
          echo "dockerfile=$(date -d "$(git log -1 --format=%cd --date=iso -- ${{ steps.name_definitions.outputs.file_name }})" +%s)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          file: ${{ steps.name_definitions.outputs.file_name }}
          target: server
          build-args: |
            LLAMA_GIT_TAG=b4686
          push: true
          tags: ${{ steps.name_definitions.outputs.image_name }}
        if: |
          steps.image_modify_date.outputs.value < steps.file_modify_date.outputs.dockerfile
  build_lutris:
    name: Image for Lutris and gaming
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: "0"
      - name: Set and use variable
        id: name_definitions
        run: |
          echo "image_name=rafa606/lutris:24.04" >> $GITHUB_OUTPUT
          echo "file_name=lutris.dockerfile" >> $GITHUB_OUTPUT

      - name: Check last modified time of Foo Dockerfile
        id: image_modify_date
        run: |
          echo "value=$(date -d "$(curl -s https://hub.docker.com/v2/repositories/"$(echo ${{ steps.name_definitions.outputs.image_name }} | sed 's/:/\/tags\//')" | jq -r '.last_updated')" +%s)" >> $GITHUB_OUTPUT;

      - name: Check last modified time of Foo Docker image
        id: file_modify_date
        run: |
          echo "dockerfile=$(date -d "$(git log -1 --format=%cd --date=iso -- ${{ steps.name_definitions.outputs.file_name }})" +%s)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          file: ${{ steps.name_definitions.outputs.file_name }}
          build-args: |
            BASEIMAGE=ubuntu:24.04
          push: true
          tags: ${{ steps.name_definitions.outputs.image_name }}
        if: |
          steps.image_modify_date.outputs.value < steps.file_modify_date.outputs.dockerfile
