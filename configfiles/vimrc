set mouse=r
set guifont=Monospace
set si
set ai
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smarttab
set backspace=2
set hidden
set guioptions=i
au BufRead,BufNewFile *.tex syntax spell toplevel " enable spelling without sections
colorscheme desert
nnoremap <silent><Up> gk
nnoremap <silent><Down> gj
vnoremap <silent><Up> gk
vnoremap <silent><Down> gj
inoremap <silent><Up> <C-o>gk
inoremap <silent><Down> <C-o>gj
nnoremap <silent> yr :call setreg(v:register, getreg(nr2char(getchar())))<cr>
set display+=lastline "prevent @ when a line doesn't fit on screen
" ---------------------------------------
set nocompatible
set number
set cursorline
filetype off
set rtp+=/etc/vim/bundle/Vundle.vim
call vundle#begin('/etc/vim/bundle/')
    Plugin 'Vundle.vim'
    Plugin 'YouCompleteMe'
        set encoding=utf-8
        let g:ycm_key_list_select_completion = ['<C-n>']
        let g:ycm_key_list_previous_completion = ['<C-p>']
        let g:ycm_python_binary_path='/usr/bin/python3'
        let g:ycm_clangd_binary_path='/usr/bin/clangd'
        let g:ycm_clangd_args=['--header-insertion=never']
        let g:ycm_global_ycm_extra_conf='/etc/vim/ycm_extra_conf.py'
        let g:ycm_confirm_extra_conf = 1
        let g:SuperTabDefaultCompletionType = '<C-n>'
    Plugin 'vim-latex'
    " ------- tagbar -------
    Plugin 'tagbar'
        let g:tagbar_ctags_options = ['/etc/vim/ctags']
        let g:tagbar_type_xml = {
                    \ 'kinds' : ['j:joints', 'l:links', 'p:properties', 'm:macros', 'i:includes', 'n:nodes']
                    \}
    Plugin 'bufexplorer'
        " ------- ale -------
    Plugin 'ale'
        let g:ale_completion_enabled = 0
        let g:ale_fixers = {
                    \ 'python': ['autopep8'],
                    \ 'cpp': ['clang-format'],
                    \ 'cmake': ['cmakeformat'],
                    \ 'xml':['xmllint'],
                    \ 'javascript':['prettier'],
                    \ '*':['remove_trailing_lines', 'trim_whitespace'],
                    \ 'json':['jq'],
                    \ 'yaml':['prettier'],
                    \ 'html':['prettier'],
                    \ 'sh':['shfmt']
                    \ }
        let g:ale_sh_shfmt_options='-i 4'

        let g:ale_linters = {
                    \'python': ['pylint', 'flake8', 'prospector'],
                    \'xml':['xmllint'],
                    \'cpp':['clangtidy', 'cc', 'flawfinder'],
                    \'dockerfile':['hadolint'],
                    \'sh':['bashate'],
                    \'html':['htmlhint'],
                    \}
python3 << EOF
import vim, sys, os
sys.path.append('/etc/vim/bundle/YouCompleteMe/python')
sys.path.append('/etc/vim/bundle/YouCompleteMe/third_party/ycmd')
print(os.getcwd()+'/ycm_extra_conf.py')
if os.path.isfile(os.getcwd()+'/ycm_extra_conf.py'):
    sys.path.append(os.getcwd())
    vim.command("let g:ycm_global_ycm_extra_conf='%s'"%(os.getcwd()+'/ycm_extra_conf.py'))

else:
    sys.path.append('/etc/vim/')

from ycm_extra_conf import FlagGenerator
flag_generator = FlagGenerator(os.getcwd())
flag_list = flag_generator.get_flags()
for i, flag in enumerate(flag_list, start=1):
    if flag_list[i-1] == '-isystem':
        flag_list[i] = '\'\''+flag_list[i]+'\'\''

result = ' '.join(flag_list)
vim.command("let g:ale_cpp_cc_options='%s'"% result)
vim.command("let g:ale_cpp_clangtidy_options='%s'"% result)
#start = vim.eval("startline")
#end = vim.eval("endline")
EOF
        let g:ale_c_clangformat_use_local_file = 1
        let g:ale_cpp_clangtidy_executable = 'clang-tidy'
        let g:ale_cpp_cc_executable = 'gcc'
        let g:ale_sign_error = 'E'
        let g:ale_sign_warning = 'W'
        let g:ale_lint_on_text_changed = 'never'
        let g:ale_lint_on_enter = 1
        let g:ale_lint_on_insert_leave = 1
        let g:ale_fix_on_save = 1
        function! SetAlePylint()
			let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")' --extension-pkg-allow-list=.so"
			if filereadable(".pylintrc")
				let g:ale_python_pylint_options = "--rcfile .pylintrc " . g:ale_python_pylint_options
			endif
        endfunction
        autocmd BufRead,BufNewFile *.py call SetAlePylint()

        nmap <silent> <leader>aj :ALENext<cr>
        nmap <silent> <leader>ak :ALEPrevious<cr>

    " ------- vim-substitute -------
    Plugin 'vim-substitute'
        let g:substitute_SingleWordSize=100
    Plugin 'ultisnips'
        let g:UltiSnipsExpandTrigger = "<c-j>"
        let g:UltiSnipsJumpForwardTrigger = "<c-n>"
        let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
    Plugin 'vim-snippets'
    Plugin 'vim_snippets_ros'
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
    Plugin 'vim-fugitive'
    Plugin 'xmledit'
    Plugin 'vimspector'
        let g:vimspector_enable_mappings = 'HUMAN'
        map  <F4>          :TagbarToggle<CR>
		nmap <Leader>di <Plug>VimspectorBalloonEval
		xmap <Leader>dr <Plug>VimspectorReset
    Plugin 'vim-dispatch'
    Plugin 'fzf'
    Plugin 'fzf.vim'

    Plugin 'nerdtree'
        let NERDTreeShowHidden=1

    Plugin 'cmake4vim'
        let g:cmake_vimspector_support=1
        let g:cmake_build_executor='dispatch'
        let g:make_arguments='-j20'
        let g:cmake_ctest_args='-j20 --output-on-failure --verbose'
    autocmd BufRead,BufNewFile *.cpp
   			\ let g:cmake_vimspector_default_configuration = {
               \ 'adapter': 'vscode-cpptools',
               \ 'configuration': {
                   \ 'request': 'launch',
                   \ 'cwd': '${workspaceRoot}',
                   \ 'Mimode': '',
                   \ 'args': [],
                   \ 'program': ''
                   \ }
               \ }

    Plugin 'lualine-cmake4vim'

    Plugin 'nerdtree-git-plugin'
    Plugin 'vim-interestingwords'
    Plugin 'vim-doge'
    Plugin 'Vim-Jinja2-Syntax'
    Plugin 'indentLine'
    Plugin 'vim-commentary'
    Plugin 'vim-repeat'
    Plugin 'vim-surround'
    "Plugin 'vim-unimpaired'  not sufficiently useful
    Plugin 'vim-cutclass'
    Plugin 'vim-yoink'
        let g:yoinkIncludeDeleteOperations=1

    Plugin 'vim-editvar'
    Plugin 'powerline'
    Plugin 'vim-be-good'

    " vim refactor stuff
    Plugin 'lh-vim-lib'
    Plugin 'lh-tags'
    Plugin 'lh-dev'
    Plugin 'lh-style'
    Plugin 'lh-brackets'
    Plugin 'vim-refactor'
    " For experimental function extraction
    Plugin 'mu-template'
    Plugin 'stakeholders_vim'

    Plugin 'undotree'
    Plugin 'vim-find-files'
    Plugin 'vim-mergetool'
    Plugin 'ctrlp.vim'
    Plugin 'ctrlp-funky'

    Plugin 'vista'
    Plugin 'vim-clap'
        nmap <leader>cb :Clap buffers<CR>
        nmap <leader>cfl :Clap files<CR>
        nmap <leader>cfg :Clap files .<CR>
        nmap <leader>ctl :Clap tags<cr>
        nmap <leader>cgc :Clap bcommits<cr>
        nmap <leader>cgr :Clap grep<cr>
        nmap <leader>cm :Clap marks<cr>
        nmap <leader>cy :Clap yanks<cr>

    Plugin 'vim-arduino'
    Plugin 'vim-polyglot'
    Plugin 'vim-markdown'
        let g:markdown_syntax_conceal = 0
        let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'cpp', 'xml']
    Plugin 'vim-easy-align'
    Plugin 'gtest-vim'
    Plugin 'spelunker.vim'
        let g:spelunker_white_list_for_user = ['ros', 'vimrc', 'yaml', 'rcl', 'of', 'os', 'alloc', 'cpp', 'filesystem', 'rclcpp']
        let g:spelunker_white_list_for_user += ['ofstream', 'iostream', 'osstringstream', 'imfusion', 'rosparam', 'trunc', 'ifdef']
        let g:spelunker_white_list_for_user += ['chrono']
        highlight SpelunkerSpellBad cterm=underline ctermfg=247 gui=underline guifg=#9e9e9e
        highlight SpelunkerComplexOrCompoundWord cterm=underline ctermfg=NONE gui=underline guifg=NONE

    Plugin 'vim-diminactive'
                autocmd ColorScheme,VimEnter *
                                    \ verbose highlight!
                    \ verbose highlight! ColorColumn cterm=none term=none ctermbg=DarkGray ctermfg=none guibg=#2f2713 guifg=NONE
        let g:diminactive_buftype_blacklist = ['nofile', 'nowrite', 'acwrite', 'quickfix', 'help', 'diff']


call vundle#end()
filetype plugin indent on
filetype plugin on
" ----------------------------------------------------
" ---------------- Status Line -----------------------
" ----------------------------------------------------

highlight GITPART ctermbg=yellow  guifg=yellow
" jamessan's
set laststatus=2
set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%1*%#GITPART#%{FugitiveStatusline()}%*
set statusline+=%-2.2n                       " buffer number
set statusline+=%{fnamemodify(expand('%:p:h'),':h:t')}/%{expand('%:p:h:t')}/%t
set statusline+=%h%m%r%w                     " flags_
set statusline+=[
"set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
"set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]               " file format
set statusline+=%=                            " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  "show hi
set statusline+={%b,0x%B}\                   " current char
set statusline+=(%(%l,%c%V%))\ %<%P        " offset

" ----------------------------------------------------
" ---------------- Sentece for each line format ------
" ----------------------------------------------------
function! MyFormatExpr(start, end)
  silent execute a:start.','.a:end.'j'
  silent execute a:start.','.a:end.'s/\(e\.g\|\<al\|i\.e\)\@<![.!?]\zs /\r/g'
"\zs     Matches at any position, and sets the start of the match there: The
"        next char is the first char of the whole match. /zero-width
"        I.E. This only substitute the space after [.!?]
  silent execute a:start.','.a:end.'g/^\s*$/d'
"\s      whitespace character: <Space> and <Tab>
endfunction

set formatexpr=MyFormatExpr(v:lnum,v:lnum+v:count-1)

set conceallevel=0
